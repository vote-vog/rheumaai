import { useState } from 'react';
import { View, Text, TextInput, TouchableOpacity, Alert, ScrollView, StyleSheet } from 'react-native';
import { useRouter } from 'expo-router';
import { supabase } from '@/lib/supabase';

export default function OnboardingScreen() {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    age: '',
    gender: '',
    diagnosis: '—Ä–µ–≤–º–∞—Ç–æ–∏–¥–Ω—ã–π –∞—Ä—Ç—Ä–∏—Ç',
    diagnosisDuration: '',
    morningStiffness: '',
    painLevel: ''
  });
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  const handleSave = async () => {
    setLoading(true);
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('User not found');

      const { error } = await supabase
        .from('profiles')
        .update({
          age: parseInt(formData.age),
          gender: formData.gender,
          diagnosis: formData.diagnosis,
          diagnosis_duration: parseInt(formData.diagnosisDuration),
          morning_stiffness: parseInt(formData.morningStiffness),
          pain_level: parseInt(formData.painLevel),
          updated_at: new Date().toISOString()
        })
        .eq('id', user.id);

      if (error) throw error;

      Alert.alert('–£—Å–ø–µ—à–Ω–æ', '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
      router.replace('/(tabs)/chat');

    } catch (error) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
    } finally {
      setLoading(false);
    }
  };

  const renderStep1 = () => (
    <View style={styles.stepContainer}>
      <Text style={styles.title}>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RheumaAI! üëã</Text>
      <Text style={styles.subtitle}>
        –ü–æ–º–æ–∂–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏
      </Text>
    </View>
  );

  const renderStep2 = () => (
    <View style={styles.stepContainer}>
      <Text style={styles.title}>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Text>
      <TextInput
        placeholder="–í–æ–∑—Ä–∞—Å—Ç *"
        value={formData.age}
        onChangeText={(text) => setFormData({...formData, age: text})}
        keyboardType="numeric"
        style={styles.input}
      />
      <TextInput
        placeholder="–ü–æ–ª (–ú/–ñ)"
        value={formData.gender}
        onChangeText={(text) => setFormData({...formData, gender: text})}
        style={styles.input}
      />
    </View>
  );

  const renderStep3 = () => (
    <View style={styles.stepContainer}>
      <Text style={styles.title}>–û –≤–∞—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏</Text>
      <TextInput
        placeholder="–°—Ç–∞–∂ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è (–ª–µ—Ç)"
        value={formData.diagnosisDuration}
        onChangeText={(text) => setFormData({...formData, diagnosisDuration: text})}
        keyboardType="numeric"
        style={styles.input}
      />
      <TextInput
        placeholder="–£—Ç—Ä–µ–Ω–Ω—è—è —Å–∫–æ–≤–∞–Ω–Ω–æ—Å—Ç—å (–º–∏–Ω—É—Ç)"
        value={formData.morningStiffness}
        onChangeText={(text) => setFormData({...formData, morningStiffness: text})}
        keyboardType="numeric"
        style={styles.input}
      />
      <TextInput
        placeholder="–£—Ä–æ–≤–µ–Ω—å –±–æ–ª–∏ (0-10)"
        value={formData.painLevel}
        onChangeText={(text) => setFormData({...formData, painLevel: text})}
        keyboardType="numeric"
        style={styles.input}
      />
    </View>
  );

  return (
    <ScrollView style={styles.container}>
      {step === 1 && renderStep1()}
      {step === 2 && renderStep2()}
      {step === 3 && renderStep3()}
      
      <View style={styles.navigation}>
        {step > 1 && (
          <TouchableOpacity onPress={() => setStep(step - 1)}>
            <Text style={styles.navButton}>–ù–∞–∑–∞–¥</Text>
          </TouchableOpacity>
        )}
        
        <TouchableOpacity 
          onPress={step < 3 ? () => setStep(step + 1) : handleSave}
          disabled={loading}
        >
          <Text style={styles.navButton}>
            {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : step < 3 ? '–î–∞–ª–µ–µ' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å'}
          </Text>
        </TouchableOpacity>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#fff',
  },
  stepContainer: {
    flex: 1,
    minHeight: 400,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    marginBottom: 30,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ddd',
    padding: 15,
    borderRadius: 10,
    marginBottom: 15,
    fontSize: 16,
  },
  navigation: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 30,
    padding: 20,
  },
  navButton: {
    fontSize: 18,
    color: '#007AFF',
    fontWeight: '600',
  },
});
// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ onboarding.tsx
const validateStep = (currentStep: number) => {
  switch (currentStep) {
    case 2:
      return formData.age && formData.gender;
    case 3:
      return formData.diagnosisDuration && formData.morningStiffness && formData.painLevel;
    default:
      return true;
  }
};

// –û–±–Ω–æ–≤–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
<TouchableOpacity 
  onPress={step < 3 ? () => setStep(step + 1) : handleSave}
  disabled={loading || !validateStep(step)}
  style={{
    opacity: validateStep(step) ? 1 : 0.5
  }}
>
